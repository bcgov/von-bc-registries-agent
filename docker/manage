#!/bin/bash
#
# Copyright 2017-2018 Government of Canada - Public Services and Procurement Canada - buyandsell.gc.ca
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# getDockerHost; for details refer to https://github.com/bcgov/DITP-DevOps/tree/main/code/snippets#getdockerhost
. /dev/stdin <<<"$(cat <(curl -s --raw https://raw.githubusercontent.com/bcgov/DITP-DevOps/main/code/snippets/getDockerHost))" 
export DOCKERHOST=$(getDockerHost)
export MSYS_NO_PATHCONV=1
set -e

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------

usage() {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the project.
          You need to do this first, since the builds require
          a combination of Docker images.

  up -  Creates the application container from the built images
        and starts the services based on the docker-compose.yml file.

        You can pass in a list of containers to start.
        By default all containers will be started.

  start - Same as up

  scale/upscale - Same as start/up however starts multiple instances of the aca-py container.

        Note that to run "scale" you need to update the docker-compose.yml file to REMOVE exposed ports
        from the bcreg-agent container.

        You also need to FIRST run `./manage start` to initialize the agent and wallet, then run
        `./manage stop` and then `./manage scale`.

  logs - Display the logs from the docker compose run (ctrl-c to exit).

  stop - Stops the services.  This is a non-destructive process.  The volumes and containers
         are not deleted so they will be reused the next time you run start.

  down - Brings down the services and removes the volumes (storage) and containers.

  rm - Same as down

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------

DEFAULT_CONTAINERS=""

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

configureEnvironment () {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export $line
      fi
    done < .env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-"vonx"}
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export GENESIS_URL=${GENESIS_URL:-${LEDGER_URL}/genesis}
  #export AGENT_ADMIN_API_KEY=${AGENT_ADMIN_API_KEY:-R2D2HfPM5Zwd69IjclQiuFmcMV6}

  export WEB_HTTP_PORT=5550

  # bcreg-controller
  export CONTROLLER_PORT=5000
  export EXPOSED_CONTROLLER_PORT=5002
  export TOB_AGENT_ADMIN_INTERFACE_PORT=8024
  export TOB_AGENT_ADMIN_URL=${TOB_AGENT_ADMIN_URL:-http://vcr-agent:${TOB_AGENT_ADMIN_INTERFACE_PORT}}
  export TOB_ADMIN_API_KEY=${TOB_ADMIN_API_KEY:-R2D2HfPM5Zwd69IjclQiuFmcMV6}
  export CONTROLLER_URL=http://bcreg-controller:${CONTROLLER_PORT}
  export EXTRA_DEMO_CREDS=${EXTRA_DEMO_CREDS}

  export RECORD_TIMINGS=${RECORD_TIMINGS:-false}
  export TRACE_EVENTS=${TRACE_EVENTS:-false}
  export TRACE_TARGET=${TRACE_TARGET:-log}
  # set this one manually to trace a percentage of issued credential exchanges
  export TRACE_MSG_PCT=${TRACE_MSG_PCT}

  # bcreg-agent
  export AGENT_HTTP_INTERFACE_PORT=8031
  export AGENT_WS_INTERFACE_PORT=8033
  export AGENT_ADMIN_INTERFACE_PORT=8034
  export AGENT_WALLET_NAME=${AGENT_WALLET_NAME:-icat_agent_wallet}
  export WALLET_SEED=bc_registries_dev_00000000000000
  export AGENT_NAME="bcreg.agent"
  export AGENT_ENDPOINT=${AGENT_ENDPOINT:-http://bcreg-agent:$AGENT_HTTP_INTERFACE_PORT}
  #export AGENT_ADMIN_API_KEY=${AGENT_ADMIN_API_KEY}
  export AGENT_ADMIN_MODE="admin-insecure-mode"
  if [ ! -z "${AGENT_ADMIN_API_KEY}" ]; then
    AGENT_ADMIN_MODE="admin-api-key ${AGENT_ADMIN_API_KEY}"
  fi
  export AGENT_TIMING_MODE=""
  if [ "${RECORD_TIMINGS}" = "true" ]; then
    AGENT_TIMING_MODE="--timing"
  fi
  export AGENT_TRACE_MODE=""
  if [ "${TRACE_EVENTS}" = "true" ]; then
    AGENT_TRACE_MODE="--trace"
  fi

  # wallet-db
  export WALLET_TYPE="postgres_storage"
  export WALLET_ENCRYPTION_KEY="key"
  export POSTGRESQL_WALLET_HOST="bcreg-wallet-db"
  export POSTGRESQL_WALLET_PORT="5432"
  export POSTGRESQL_DATABASE="THE_ORG_BOOK"
  export POSTGRESQL_USER="DB_USER"
  export POSTGRESQL_PASSWORD="DB_PASSWORD"
  export POSTGRESQL_ADMIN_USER="postgres"
  export POSTGRESQL_ADMIN_PASSWORD="mysecretpassword"
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""
  if [ "$COMMAND" == "start" ]; then
    ARGS+="--force-recreate"
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

build() {
  # Build all containers in the docker-compose file
  echo -e "\nBuilding containers ..."
  echo docker-compose build $@
  docker-compose build $@
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose rm -svf >/dev/null

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} |  xargs docker volume rm
  else
    echo "No project volumes exist."
  fi
}

# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$1
shift || true

case "$COMMAND" in
  start|up)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up -d ${_startupParams}
    docker-compose logs -f
    ;;
  scale|upscale)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    echo "NOTE make sure you have previously run $@ start to initialize the agent and wallet!!!"
    echo "NOTE make sure you have removed the port mapping in docker-compose.yml for bcreg-agent!!!"
    echo "Press any key to continue or <CRTL-C> to abort"
    read anykey
    docker-compose up --scale bcreg-agent=5 -d ${_startupParams}
    docker-compose logs -f
    ;;
  logs)
    configureEnvironment $@
    docker-compose logs -f
    ;;
  stop)
    configureEnvironment $@
    docker-compose stop
    ;;
  startdb)
    configureEnvironment $@
    docker-compose up -d bcregdb
    docker-compose logs -f
   ;;
  stopdb)
    configureEnvironment
    docker-compose stop bcregdb
   ;;
  rm|down)
    configureEnvironment $@
    deleteVolumes
    ;;
  build)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    build ${_startupParams}
    ;;
  *)
    usage
esac

popd >/dev/null
