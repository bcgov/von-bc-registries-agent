#!/usr/bin/python
import psycopg2
import datetime
import os
import logging

from bcreg.config import config
from bcreg.eventprocessor import EventProcessor
from bcreg.bcreg_lear import BCReg_Lear, lear_system_type, LEAR_CORP_TYPES_IN_SCOPE

LOG_LEVEL = os.environ.get('LOG_LEVEL', 'WARNING').upper()
logging.basicConfig(level=LOG_LEVEL)


specific_corps = [
    'CP0000672',
    'CP0001309',
    'CP0001311',
    'CP0001316',
    'FM0020270',
    'FM0222860',
    'FM0268275',
    'FM0272479',
    'BC0870921',
    'BC0870922',
    'FM1000038',
    'FM1000042',
    'FM1000047',
    'FM1000046',
    'FM0346897',
    'FM0346781',
    'FM0346815',
    'FM1017072',
    'BC1255957',
    'FM0814438',
    'FM0562853',
    'FM0575361',
    'FM0842476',
    'FM1004542',
    'FM1016197','FM0272889','FM0554287','FM0647554','FM0556572','FM0558680','FM0555836','FM0556028',
'FM0054588',
'FM0081561',
'FM0086546',
'FM0109121',
'FM0133415',
'FM0159814',
'FM0159962',
'FM0188751',
'FM0257508',
'FM0257509',
'FM0291579',
'FM0300499',
'FM0314345',
'FM0317954',
'FM0329568',
'FM0347655',
'FM0371490',
'FM0393433',
'FM0407880',
'FM0416637',
'FM0417824',
'FM0419486',
'FM0425900',
'FM0436851',
'FM0438685',
'FM0440317',
'FM0450241',
'FM0456494',
'FM0471526',
'FM0485277',
'FM0485497',
'FM0486439',
'FM0488401',
'FM0490783',
'FM0505623',
'FM0508878',
'FM0512963',
'FM0512974',
'FM0522283',
'FM0524628',
'FM0531655',
'FM0559520',
'FM0565072',
'FM0568714',
'FM0573687',
'FM0573695',
'FM0575004',
'FM0575737',
'FM0578619',
'FM0583154',
'FM0593946',
'FM0594297',
'FM0598018',
'FM0601717',
'FM0601877',
'FM0603056',
'FM0604725',
'FM0604892',
'FM0604915',
'FM0604920',
'FM0606252',
'FM0612377',
'FM0612401',
'FM0614314',
'FM0614316',
'FM0614320',
'FM0614321',
'FM0616490',
'FM0616491',
'FM0617274',
'FM0617289',
'FM0617323',
'FM0617329',
'FM0618732',
'FM0619952',
'FM0620606',
'FM0622612',
'FM0644099',
'FM0646523',
'FM0646525',
'FM0646527',
'FM0647782',
'FM0651810',
'FM0653550',
'FM0654697',
'FM0656125',
'FM0656129',
'FM0658268',
'FM0662620',
'FM0662914',
'FM0663815',
'FM0664011',
'FM0670211',
'FM0670213',
'FM0671292',
'FM0675010',
'FM0676604',
'FM0677081',
'FM0679497',
'FM0680526',
'FM0680527',
'FM0680529',
'FM0682065',
'FM0683225',
'FM0683226',
'FM0689215',
'FM0691626',
'FM0693086',
'FM0696541',
'FM0697392',
'FM0700411',
'FM0703141',
'FM0703143',
'FM0703668',
'FM0707348',
'FM0707349',
'FM0707776',
'FM0708118',
'FM0711066',
'FM0711112',
'FM0711115',
'FM0711517',
'FM0712104',
'FM0714604',
'FM0735809',
'FM0744665',
'FM0746638',
'FM0748347',
'FM0761070',
'FM0761367',
'FM0766310',
'FM0776457',
'FM0782268',
'FM0782269',
'FM0785710',
'FM0786687',
'FM0791985',
'FM0794864',
'FM0801676',
'FM0810232',
'FM0816652',
'FM0818330',
'FM0819762',
'FM0822307',
'FM0822310',
'FM0822557',
'FM0823104',
'FM0823108',
'FM0823355',
'FM0825708',
'FM0830301',
'FM0834228',
'FM0836869',
'FM0836965',
'FM0840190',
'FM0841769',
'FM0852951',
'FM0856229',
'FM1003299',
'FM1030599',
'FM1045631',
'FM1045640',
'FM1045641',
'FM1045659',
'FM1045683',
'FM1045687',
'FM1045692',
'FM1045693',
'FM1045696',
'FM1045697',
'FM1045698',
'FM1045700',
'FM1045701',
'FM1045705',
'FM1045706',
'FM1045708',
'FM1045709',
'FM1045716',
'FM1045718',
'FM1045719',
'FM1045722',
'FM1045729',
'FM1045730',
'FM1045731',
'FM1045739',
'FM1045741',
'FM1045750',
'FM1045755',
'FM1045758',
'FM1045775',
'FM1045780',
'FM1045784',
'FM1045788',
'FM1045795',
'FM1045798',
'FM1045801',
'FM1045811',
'FM1045814',
'FM1045815',
'FM1045818',
'FM1045820',
'FM1045822',
'FM1045823',
'FM1045836',
'FM1045842',
'FM1045853',
'FM1045855',
'FM1045861',
'FM1045873',
'FM1045877',
'FM1045885',
'FM1045893',
    'FM0055113',
    'FM0020924',
'FM0159814',
'FM0314345',
'FM0417824',
'FM0436851',
'FM0575737',
'FM0604892',
'FM0604920',
'FM0617274',
'FM0617289',
'FM0617323',
'FM0617329',
'FM0662620',
'FM0664011',
'FM0679497',
'FM0735809',
'FM0744665',
'FM0785710',
'FM0823104',
'FM0823108',
'FM0836965',
'FM0841769',
'FM1003299',
'FM1030599',
'FM0072706',
'BC0880294',
"FM1047673",
"FM1047672",
"FM0255173",
"FM1047674",
"FM1047675",
"FM1046346",
"FM1047676",
"FM1046062",
"FM0805003",
"FM0890043",
"FM0660107",
"FM0640423",
"FM1046062",
"FM0697861",
"FM0657920",
"FM0712759",
"FM0750494",
"BC1419015",
"FM0563576",
"FM0726760",
"FM0748620",
"FM1047699",
"FM1039894",
"FM0622765",
"FM0796052",
"FM0150016",
"FM0514385",
"FM0514390",
"FM0778745",
"FM1046467",
"FM0808758",
"FM0584418",
"FM0704113",
"FM0720422",
"BC1308631",
"BC1211148",
"FM0721160",
"BC1211148",
"FM1047950",
"FM0846309",
"FM1047953",
"FM0379961",
"FM0786779",
"FM0531417",
"FM0531419",
"FM0601147",
"FM0521608",
"FM0448307",
"FM0589577",
"FM0610988",
"FM0796135",
"FM0637316",
"FM0650808",
"FM0626485",
"FM0649161",
"FM0649156",
"FM0652594",
"FM0649159",
"FM0532171",
"FM0425085",
"FM0616293",
"CP1002405",
"BC0460159",
"FM0870225",
"FM0400052",
"FM0514540",
"FM0175271",
"FM0554062",
"FM0474195",
"FM0745620",
"FM0558400",
"FM0307477",
"FM0711655",
"FM0638113",
"FM0640565",
"FM0570688",
"FM0619544",
"FM0711650",
"FM0638111",
"FM0512817",
"FM0773954",
"FM0632037",
"FM0638114",
"FM0512810",
"FM0629007",
"FM0476097",
"FM0372833",
"FM0711894",
"FM0089141",
"FM1048424",
"FM1048425",
"FM1048426",
"FM0848575",
"FM1048427",
"FM1048428",
"CP0002328",
"FM1048429",
"FM1048430",
"FM0357337",
"FM1048431",
"BC1221754",
"BC0962052",
"FM0825023",
"FM1048468",
"BC1064870",
"FM1048468",
"BC1064870",
"FM0599931",
"FM0705421",
"FM0273747",
"FM1048951",
"BC1191917",
"FM0766386",
"FM0637140",
"FM0637147",
"FM0637144",
"FM0733742",
"FM0836689",
"FM0837272",
"FM0051499",
"FM0856247",
"FM0856251",
"FM1048951",
"FM1048535",
"FM1048712",
"BC1191917",
"FM0845342",
"FM0562411",
"FM0594832",
"FM0462338",
"FM0116473",
"FM0797064",
"FM0721734",
"FM0807644",
"FM0864330",
"FM0381923",
"FM0546403",
"FM0667543",
"FM0538576",
"FM0668851",
"FM0422598",
"FM0273990",
"FM0419947",
"FM0427720",
"FM0273988",
"FM0107624",
"FM0520272",
"FM0327179",
"FM0107625",
"FM0419935",
"FM0280898",
"FM0244805",
"FM0872464",
"FM0113831",
"FM0611178",
"FM0671989",
"FM0562403",
"FM0379040",
"FM0302943",
"FM0238135",
"FM0111829",
"FM0562399",
"FM0248364",
"FM0343664",
"FM0151825",
"FM0078487",
"FM0308599",
"FM0447816",
"FM0245420",
"FM0021681",
"FM0254913",
"FM0372911",
"FM0439676",
"FM0562397",
"FM0539319",
"FM0666016",
"FM0539326",
"FM0400320",
"FM0646897",
"FM0637141",
"FM0120756",
"FM0113795",
"FM0275742",
"FM0562401",
"FM0637146",
"FM0445111",
"FM0162672",
"FM0245421",
"FM0267277",
"FM0539328",
"FM0225294",
"FM0266109",
"FM0429164",
"FM0248892",
"FM0469247",
"FM0317625",
"FM0447517",
"FM0340319",
"FM0637472",
"FM0267276",
"FM0078486",
"FM0453765",
"FM0445199",
"FM0266110",
"FM0021682",
"FM0414526",
"FM0693734",
"FM0336456",
"FM0322987",
"FM0117079",
"FM0304124",
"FM0107626",
"FM0520269",
"FM0694426",
"FM0644821",
"FM0571555",
"BC1420500",
"FM1048952",
"FM1048953",
"FM1048954",
"BC0344784",
"FM0048542",
"FM0048543",
"FM0146800",
"FM0167011",
"FM0569857",
"FM0602135",
"FM0569852",
"FM0881807",
"FM0610635",
"FM0283819",
"FM0675910",
"FM0879553",
"FM0761810",
"FM0785613",
"FM0823370",
"FM0823369",
"FM0294080",
"FM0438325",
"FM0567490",
"FM0853256",
"FM0819358",
"FM0622221",
"FM0156995",
"FM0672454",
"FM0879814",
"FM1048954",
"FM1048955",
"BC0344784",
"FM0452739",
"FM0708863",
"FM0093333",
"FM0872353",
"FM0805745",
"FM0542825",
"FM0543395",
"FM0730185",
"FM0763364",
"FM0586600",
"FM0586774",
"FM0605584",
"FM0816452",
"FM0825860",
"FM0851192",
"FM0652328",
"FM0888367",
"FM1035025",
"FM0695202",
"FM0833478",
"FM0869907",
"FM0647777",
"FM0285801",
"FM0295928",
"FM1048956",
"FM1048957",
"FM1048958",
"FM1048959",
"FM1048960",
"FM1048961",
"FM0872065",
"BC1232265",
"FM0322749",
"FM0752803",
"FM0542817",
"FM0785613",
"FM0298220",
"FM0032849",
"FM0089857",
"FM0320330",
"FM0488084",
"FM0585609",
"FM0402526",
"FM0801232",
"FM0770146",
"FM0731640",
"FM0138736",
"FM0759337",
"FM0709187",
"FM0604311",
"FM0766107",
"FM0881008",
"FM0777703",
"FM0726155",
"FM0890189",
"FM0297919",
"FM0852484",
"FM0300879",
"FM0634675",
"FM0436837",
"FM0587923",
"FM0297917",
"FM0852476",
"FM0852475",
"FM0852481",
"FM0524332",
"FM0852472",
"FM0852477",
"FM0524335",
"FM0852479",
"FM0436835",
"FM0414684",
"FM0436836",
"FM0414681",
"FM0705279",
"FM0607333",
"FM1048964",
"FM1048965",
"FM1048966",
"FM0183685",
"FM1048968",
"FM1048969",
"FM1048970",
"FM0800864",
"A0132521",
"FM0890169",
"FM0475581",
"FM0560152",
"FM0615813",
"FM0575165",
"FM0575111",
"FM0575161",
"FM0573889",
"FM0621789",
"FM0679113",
"FM0661158",
"FM0722725",
"FM0808272",
"FM0599664",
"FM1048970",
"FM1048971",
"FM1048972",
"FM1048973",
"FM0855306",
"FM1048974",
"FM0585067",
"FM0862340",
"FM0274329",
"FM0690792",
"FM0599622",
"FM0805389",
"FM0454598",
"FM1048974",
"FM1048975",
"FM0580283",
"FM0676212",
"FM0586363",
"FM0586362",
"FM0719874",
"FM0586359",
"FM0586367",
"FM0748685",
"FM0748684",
"FM1049130",
"FM0436933",
"FM1049131",
"BC1225266",
"FM0720340",
"FM0575266",
"FM0517961",
"FM0436933",
"FM1049142",
"BC0609311",
"FM0100812",
"FM0087761",
"FM0383896",
"FM0594032",
"FM0580085",
"FM0888423",
"FM0829688",
"FM0854870",
"FM0685389",
"FM0747823",
"FM0586566",
"FM1049498",
"FM1049499",
"FM1049499",
"FM1049500",
"FM1049501",
"FM1049502",
"FM1049390",
"FM1049504",
"FM0800780",
"FM0800782",
"FM1049638",
"FM0715141",
"FM1049639",
"FM1049628",
"FM1049588",
"FM1049640",
"FM1049641",
"FM1040913",
"FM1049642",
"FM0643084",
"FM0421279",
"FM0576136",
"FM0854712",
"FM0584965",
"FM0354693",
"FM0620302",
"FM0581871",
"FM0575459",
"FM0519892",
"FM0491113",
"FM0545013",
"FM0737016",
"FM0435896",
"FM0769788",
"FM0802941",
"FM0798865",
"FM0769558",
"FM0852200",
"FM0852190",
"FM0799958",
"FM0892195",
"FM0650879",
"FM0554879",
"FM0883540",
"FM0235967",
"FM0603916",
"FM0640395",
"FM0768525",
"FM0547280",
"FM0561239",
"FM1049646",
"FM1049647",
"FM1049648",
"FM1049649",
"FM1049650",
"FM1049651",
"FM1049652",
"FM1049653",
"FM1049654",
"BC0489568",
"BC0896314",
"FM0568859",
"FM0570108",
"FM0619934",
"FM0600034",
"FM0721480",
"FM0330561",
"FM0754400",
"FM0636119",
"FM0828164",
"FM0757985",
"FM0892110",
"FM0743712",
"FM1049654",
"BC1156638",
"FM1049656",
"FM0672288",
"FM0672455",
"FM0672402",
"FM0545013",
"FM0085071",
"FM0042502",
"FM1049657",
"FM1049658",
"FM1049652",
"FM1049645",
"BC1463396",
"FM0878626",
"FM0538744",
"FM0608664",
"FM0676477",
"FM0742469",
"FM0862768",
"FM0545013",
"FM0741988",
"FM0719442",
"FM0292791",
"FM0106608",
"FM0810521",
"FM0733881",
"FM0733880",
"FM1049659",
"FM1049660",
"FM1049662",
"FM1049663",
"FM1049664",
"FM1049665",
"FM0570406",
"FM0820813",
"FM0715114",
"FM0715116",
"FM0666651",
"FM0696189",
"FM0065067",
"FM0692447",
"FM0659025",
"FM0708902",
"FM0404369",
"FM0627978",
"FM0596761",
"FM0817386",
"FM0596762",
"FM0627976",
"FM0404438",
"FM0824351",
"FM0772754",
"FM0720613",
"FM0691741",
"FM0753151",
"FM0581760",
"FM0371191",
"FM0883259",
"FM0883317",
"FM1049670",
"FM1049671",
"FM1049672",
"FM0774072",
"FM1049673",
"FM1049674",
"FM1049675",
"FM1049676",
"FM0468644",
"FM1049677",
"BC1373070",
"FM0525711",
"FM0575459",
"FM0519892",
"FM0804444",
"FM0781294",
"FM0674530",
"FM0867900",
"FM0763135",
"FM0677101",
"FM0223089",
"FM0796768",
"FM1050152",
"FM1050153",
"FM0752763",
"FM0745022",
"FM0608121",
"FM0732274",
"FM0805767",
"FM0805772",
"FM0805771",
"FM0805764",
"FM0805790",
"FM1050153",
"FM1050154",
"FM0861015",
"FM1050220",
"FM1050221",
"FM1050222",
"FM1050223",
"A0079627",
"BC0720306",
"FM0858971",
"FM0887735",
"FM0608154",
"FM0608015",
"FM0486559",
"FM0537028",
"FM0734458",
"FM0855260",
"FM0446470",
"FM0672710",
"FM0479731",
"FM0330634",
"FM0628433",
"FM1050225",
"FM1050226",
"FM1050238",
"FM1050239",
"FM1050240",
"FM1050241",
"LP0894243",
"XS0080660",
"FM0048597",
"FM1050242",
"FM1050243",
"FM1050244",
"FM0813444",
"FM0861256",
"FM0813444",
"FM1050245",
"FM0790399",
"FM0757871",
"FM0757871",
"FM0778347",
"FM0493475",
"FM0815813",
"FM1050246",
"FM0852863",
"FM0852857",
"FM0780057",
"FM0815813",
"FM1050246",
"FM1050247",
"FM1017925",
"FM1050248",
"FM1050249",
"FM1050250",
"FM0034574",
"FM0084991",
"FM0088593",
"FM0040149",
"FM0128514",
"FM0689791",
"FM0689795",
]

specific_corps_2 = [
"FM0034575",
"FM0689792",
"FM0689794",
"FM1026078",
"FM1026078",
"FM0817100",
"FM0753514",
"FM0761107",
"FM0673227",
"FM1026078",
"FM1026078",
"FM1050228",
"FM0187475",
"FM0187474",
"FM0853591",
"FM1050228",
"FM1050255",
"FM1050256",
"FM1050257",
"FM1050258",
"FM1050259",
"A0131522",
"A0101905",
"BC1377343",
"FM0713527",
"FM0820168",
"FM0820975",
"FM0737523",
"FM0694620",
"FM0694618",
"FM0694614",
"FM0852431",
"FM0477091",
"FM0567210",
"FM0486824",
"FM0611862",
"FM0489264",
"FM0718420",
"FM0789445",
"FM0566605",
"FM0161317",
"FM0696636",
"FM0472298",
"FM0561344",
"FM0807993",
"FM0236152",
"FM0236155",
"FM0735071",
"FM0615408",
"FM0312387",
"FM0841916",
"FM0778077",
"FM0778078",
"FM0096786",
"FM0645145",
"FM0552721",
"FM0552720",
"FM0445997",
"FM0595205",
"FM0649175",
"FM0684021",
"FM0570527",
"FM0776745",
"FM0603338",
"FM1050272",
"FM1050273",
"FM1050274",
"FM0500749",
"FM0287162",
"FM0170622",
"FM1050377",
"CP0001510",
"FM1050378",
"FM0170626",
"FM1050379",
"FM1050380",
"FM1049895",
"FM1050381",
"FM1050382",
"FM0172991",
"BC1489195",
"A0132783",
"FM0742809",
"FM0596718",
"FM0647284",
"FM0423046",
"FM0567573",
"FM0704897",
"FM0594026",
"FM0610424",
"FM0567950",
"FM0360924",
"FM0281456",
"FM0722604",
"FM0365025",
"FM0428998",
"FM0794428",
"FM0599184",
"FM0598500",
"FM0636566",
"FM0567952",
"FM0281462",
"FM0629015",
"FM0281524",
"FM0530721",
"FM0492581",
"FM0619433",
"FM0641517",
"FM0520502",
"FM0462738",
"FM0365023",
"FM0720513",
"FM0175260",
"FM0861359",
"FM0699151",
"FM0545480",
"FM0668545",
"FM1050383",
"FM1050384",
"FM1050385",
"FM0167768",
"FM1050386",
"FM0751672",
"FM0742809",
"FM0673464",
"FM0423046",
"FM0668545",
"FM0427914",
"FM0848649",
"FM0691565",
"FM0737190",
"FM1050386",
"FM1050387",
"FM1050388",
"FM1017458",
"FM1050389",
"FM0392675",
"FM1050390",
"FM0371138",
"FM0673672",
"FM0673673",
"FM0673656",
"FM1050461",
"FM1050462",
"FM1050463",
"FM0573874",
"FM1050464",
"FM0655173",
"FM1050465",
"FM1050466",
"BC1384870",
"A0099618",
"A0118802",
"A0056450",
"A0119620",
"A0092367",
"A0085682",
"A0094939",
"FM0254445",
"FM0584614",
"FM0151794",
"FM0549626",
"FM0856096",
"FM0743031",
"FM0613006",
"FM1050467",
"FM1050468",
"FM0673656",
"FM1050459",
"FM1050466",
"A0097005",
"FM0827555",
"FM0754693",
"FM0890208",
"FM0754694",
"FM0780386",
"FM0758291",
"FM1050859",
"FM1050860",
"FM1050861",
"BC1491537",
"FM1050862",
"FM1050863",
"CP0000193",
"FM0685389",
"FM0747823",
"FM0747824",
"FM0655047",
"FM0698765",
"FM0592922",
"FM0542339",
"FM0526332",
"FM0747276",
"FM0181832",
"FM0587687",
"FM0565076",
"FM0629236",
"FM1050863",
"FM1050864",
"FM1050865",
"FM0677350",
"FM1050866",
"FM1050867",
"FM1050868",
"BC1485339",
"A0056133",
"FM0760037",
"FM0655047",
"FM0876195",
"FM0702097",
"FM0232395",
"FM0761468",
"FM0761470",
"FM0858651",
"FM0791978",
"FM0714719",
"FM0750213",
"FM0819090",
"FM0104868",
"FM1050868",
"FM1050869",
"FM1050870",
"FM1050871",
"FM1050860",
"FM1050872",
"FM0539790",
"FM0793067",
"FM0655221",
"FM0624491",
"FM0837803",
"FM0735464",
"FM0614258",
"FM0650107",
"FM0848847",
"FM0850184",
"FM1050872",
"FM1050873",
"FM1050874",
"FM1050875",
"FM1050876",
"FM1050877",
"FM1017537",
"FM1050878",
"FM1050879",
"BC0941883",
"FM0719475",
"FM0509343",
"FM0713647",
"FM0681130",
"FM1050879",
"FM1050880",
"FM1050881",
"FM0186831",
"FM0869260",
"FM0869258",
"FM0728166",
"FM0244706",
"FM0649385",
"FM0664494",
"FM0384701",
"FM0837366",
"FM0834163",
"FM0875408",
"FM0876195",
"FM0610497",
"FM0384701",
"FM1050881",
"FM1050882",
"FM1050883",
"FM1050884",
"FM1050885",
"BC1491537",
"FM1050886",
]

num_corps_per_type = 20


with BCReg_Lear() as bc_registries:
    # get 5 corps for each type in scope (in addition to the above list)
    corp_types_to_load = ['BEN', 'BC',]
    corp_types_to_load.extend(LEAR_CORP_TYPES_IN_SCOPE)
    for corp_type in corp_types_to_load:
        print(corp_type)
        sql = """
               select identifier as corp_num
               from businesses
               where legal_type = '""" + corp_type + """'
               order by last_modified desc
               limit 100
              """
        corps = bc_registries.get_bcreg_sql("corps_by_type", sql, cache=False)
        n_corps = min(len(corps), num_corps_per_type)
        for i in range(n_corps):
           specific_corps.append(corps[i]['corp_num'])

    with EventProcessor() as event_processor:
        print("Get last processed event")
        prev_event_id = 0

        print("Get last max event")
        max_event_date = bc_registries.get_max_event_date()
        max_event_id = bc_registries.get_max_event(max_event_date)
        print(">>> max event --> ", max_event_id, max_event_date)
        
        # get specific test corps (there are about 6)
        print("Get specific corps")
        corps = bc_registries.get_specific_corps(specific_corps)
        corps_2 = bc_registries.get_specific_corps(specific_corps_2)
        corps.extend(corps_2)

        print("Find unprocessed events for each corp")
        last_event_dt = bc_registries.get_event_effective_date(prev_event_id)
        max_event_dt = bc_registries.get_event_effective_date(max_event_id)
        corps = bc_registries.get_unprocessed_corp_events(prev_event_id, last_event_dt, max_event_id, max_event_dt, corps)
        
        print("Update our queue")
        event_processor.update_corp_event_queue(lear_system_type, corps, max_event_id, max_event_date)
