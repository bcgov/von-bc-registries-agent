#!/usr/bin/python
import psycopg2
import datetime
import os
import logging

from bcreg.config import config
from bcreg.eventprocessor import EventProcessor
from bcreg.bcreg_lear import BCReg_Lear, lear_system_type, LEAR_CORP_TYPES_IN_SCOPE

LOG_LEVEL = os.environ.get('LOG_LEVEL', 'WARNING').upper()
logging.basicConfig(level=LOG_LEVEL)


specific_corps = [
    'CP0000672',
    'CP0001309',
    'CP0001311',
    'CP0001316',
    'FM0020270',
    'FM0222860',
    'FM0268275',
    'FM0272479',
    'BC0870921',
    'BC0870922',
    'FM1000038',
    'FM1000042',
    'FM1000047',
    'FM1000046',
    'FM0346897',
    'FM0346781',
    'FM0346815',
    'FM1017072',
    'BC1255957',
    'FM0814438',
    'FM0562853',
    'FM0575361',
    'FM0842476',
    'FM1004542',
    'FM1016197','FM0272889','FM0554287','FM0647554','FM0556572','FM0558680','FM0555836','FM0556028',
'FM0054588',
'FM0081561',
'FM0086546',
'FM0109121',
'FM0133415',
'FM0159814',
'FM0159962',
'FM0188751',
'FM0257508',
'FM0257509',
'FM0291579',
'FM0300499',
'FM0314345',
'FM0317954',
'FM0329568',
'FM0347655',
'FM0371490',
'FM0393433',
'FM0407880',
'FM1045758',
'FM1045775',
'FM1045780',
'FM1045784',
'FM1045788',
'FM1045795',
'FM1045798',
'FM1045801',
'FM1045811',
'FM1045814',
'FM1045815',
'FM1045818',
'FM1045820',
'FM1045822',
'FM1045823',
'FM1045836',
'FM1045842',
'FM1045853',
'FM1045855',
'FM1045861',
'FM1045873',
'FM1045877',
'FM1045885',
'FM1045893',
    'FM0055113',
    'FM0020924',
'FM0159814',
'FM0314345',
'FM0417824',
'FM0436851',
'FM0575737',
'FM0604892',
'FM0604920',
'FM0617274',
'FM0617289',
'FM0617323',
'FM0617329',
'FM0662620',
'FM0664011',
'FM0679497',
'FM0735809',
'FM0744665',
'FM0785710',
'FM0823104',
'FM0823108',
'FM0836965',
'FM0841769',
'FM1003299',
'FM1030599',
'FM0072706',
'BC0880294',
"FM1047673",
"FM1047672",
"FM0255173",
"FM1047674",
"FM1047675",
"FM1046346",
"FM1047676",
"FM1046062",
"FM0805003",
"FM0890043",
"FM0660107",
"FM0640423",
"FM1046062",
"FM0697861",
"FM0657920",
"FM0712759",
"FM0750494",
"BC1419015",
"FM0563576",
"FM0726760",
"FM0748620",
"FM1047699",
"FM1039894",
"FM0622765",
"FM0796052",
"FM0150016",
"FM0514385",
"FM0514390",
"FM0778745",
"FM1046467",
"FM0808758",
"FM0584418",
"FM0704113",
"FM0720422",
"BC1308631",
"BC1211148",
"FM0721160",
"BC1211148",
"FM1047950",
"FM0846309",
"FM1047953",
"FM0379961",
"FM0786779",
"FM0531417",
"FM0531419",
"FM0601147",
"FM0521608",
"FM0448307",
"FM0589577",
"FM0610988",
"FM0796135",
"FM0637316",
"FM0650808",
"FM0626485",
"FM0649161",
"FM0649156",
"FM0652594",
"FM0649159",
"FM0532171",
"FM0425085",
"FM0616293",
"CP1002405",
"BC0460159",
"FM0870225",
"FM0400052",
"FM0514540",
"FM0175271",
"FM0554062",
"FM0474195",
"FM0745620",
"FM0558400",
"FM0307477",
"FM0711655",
"FM0638113",
"FM0640565",
"FM0570688",
"FM0619544",
"FM0711650",
"FM0638111",
"FM0512817",
"FM0773954",
"FM0632037",
"FM0638114",
"FM0512810",
"FM0629007",
"FM0476097",
"FM0372833",
"FM0711894",
"FM0089141",
"FM1048424",
"FM1048425",
"FM1048426",
"FM0848575",
"FM1048427",
"FM1048428",
"CP0002328",
"FM1048429",
"FM1048430",
"FM0357337",
"FM1048431",
"BC1221754",
"BC0962052",
"FM0825023",
"FM1048468",
"BC1064870",
"FM1048468",
"BC1064870",
"FM0599931",
"FM0705421",
"FM0273747",
"FM1048951",
"BC1191917",
"FM0766386",
"FM0637140",
"FM0637147",
"FM0637144",
"FM0733742",
"FM0836689",
"FM0837272",
"FM0051499",
"FM0856247",
"FM0856251",
"FM1048951",
"FM1048535",
"FM1048712",
"BC1191917",
"FM0845342",
"FM0562411",
"FM0594832",
"FM0462338",
"FM0116473",
"FM0797064",
"FM0720340",
"FM0575266",
"FM0517961",
"FM0436933",
"FM1049142",
"BC0609311",
"FM0100812",
"FM1050246",
"FM1050247",
"FM1017925",
"FM1050248",
"FM1050249",
"FM1050250",
"FM0034574",
"FM0084991",
"FM0088593",
"FM0040149",
"FM0128514",
"FM0689791",
"FM0689795",
]

specific_corps_2 = [
"FM0034575",
"FM0689792",
"FM0689794",
"FM1026078",
"FM1026078",
"FM0817100",
"FM0753514",
"FM0761107",
"FM0673227",
"FM1026078",
"FM1026078",
"FM1050228",
"FM0187475",
"FM0187474",
"FM0853591",
"FM1050228",
"FM1050255",
"FM1050256",
"FM1050257",
"FM1050258",
"FM1050259",
"A0131522",
"A0101905",
"BC1377343",
"FM0713527",
"FM0820168",
"FM0820975",
"FM0737523",
"FM0694620",
"FM0694618",
"FM0694614",
"FM0852431",
"FM0477091",
"FM0567210",
"FM0486824",
"FM0611862",
"FM0489264",
"FM0718420",
"FM0789445",
"FM0566605",
"FM0161317",
"FM0696636",
"FM0472298",
"FM0561344",
"FM0807993",
"FM0236152",
"FM0236155",
"FM0735071",
"FM0615408",
"FM0312387",
"FM0841916",
"FM0778077",
"FM0778078",
"FM0096786",
"FM0645145",
"FM0552721",
"FM0552720",
"FM0445997",
"FM0595205",
"FM0649175",
"FM0684021",
"FM0570527",
"FM0776745",
"FM0603338",
"FM1050272",
"FM1050273",
"FM1050274",
"FM0500749",
"FM0287162",
"FM0170622",
"FM1050377",
"CP0001510",
"FM1050378",
"FM0170626",
"FM1050379",
"FM1050380",
"FM1049895",
"FM1050381",
"FM1050382",
"FM0172991",
"BC1489195",
"A0132783",
"FM0742809",
"FM0596718",
"FM0647284",
"FM0423046",
"FM0567573",
"FM0704897",
"FM0594026",
"FM0610424",
"FM0567950",
"FM0360924",
"FM0281456",
"FM0722604",
"FM0365025",
"FM0428998",
"FM0794428",
"FM0599184",
"FM0598500",
"FM0636566",
"FM0567952",
"FM0281462",
"FM0629015",
"FM0281524",
"FM0530721",
"FM0492581",
"FM0619433",
"FM0641517",
"FM0520502",
"FM0462738",
"FM0365023",
"FM0720513",
"FM0175260",
"FM0861359",
"FM0699151",
"FM0545480",
"FM0668545",
"FM1050383",
"FM1050384",
"FM1050385",
"FM0167768",
"FM1050386",
"FM0751672",
"FM0742809",
"FM0673464",
"FM0423046",
"FM0668545",
"FM0427914",
"FM0848649",
"FM0691565",
"FM0737190",
"FM1050386",
"FM1050387",
"FM1050388",
"FM1017458",
"FM1050389",
"FM0392675",
"FM1050390",
"FM0371138",
"FM0673672",
"FM0673673",
"FM0673656",
"FM1050461",
"FM1050462",
"FM1050463",
"FM0573874",
"FM1050464",
"FM0655173",
"FM1050465",
"FM1050466",
"FM0876195",
"FM0610497",
"FM0384701",
"FM1050881",
"FM1050882",
"FM1050883",
"FM1050884",
"FM1050885",
"BC1491537",
"FM1050886",
"BC1026494",
"FM0650512",
"BC1024239",
"FM1048326",
"A0132048",
"A0133092",
"FM0733881",
"FM0733880",
"FM0650512",
"FM1003299",
'FM1055223', 'FM1055224', 'FM1055225', 'FM0794864', 'FM0275010',
'FM0000137', 'FM0000181', 'FM0000185', 'FM0000049', 'FM0000108',
'FM1013156', 'FM1013154', 'FM1013158', 'FM1013155', 'FM1013159',
]


num_corps_per_type = 20


with BCReg_Lear() as bc_registries:
    # get 5 corps for each type in scope (in addition to the above list)
    corp_types_to_load = ['BEN', 'BC',]
    corp_types_to_load.extend(LEAR_CORP_TYPES_IN_SCOPE)
    for corp_type in corp_types_to_load:
        print(corp_type)
        sql = """
               select identifier as corp_num
               from businesses
               where legal_type = '""" + corp_type + """'
               order by last_modified desc
               limit 100
              """
        corps = bc_registries.get_bcreg_sql("corps_by_type", sql, cache=False)
        n_corps = min(len(corps), num_corps_per_type)
        for i in range(n_corps):
           specific_corps.append(corps[i]['corp_num'])

    with EventProcessor() as event_processor:
        print("Get last processed event")
        prev_event_id = 0

        print("Get last max event")
        max_event_date = bc_registries.get_max_event_date()
        max_event_id = bc_registries.get_max_event(max_event_date)
        print(">>> max event --> ", max_event_id, max_event_date)
        
        # get specific test corps (there are about 6)
        print("Get specific corps")
        corps = bc_registries.get_specific_corps(specific_corps)
        corps_2 = bc_registries.get_specific_corps(specific_corps_2)
        corps.extend(corps_2)

        print("Find unprocessed events for each corp")
        last_event_dt = bc_registries.get_event_effective_date(prev_event_id)
        max_event_dt = bc_registries.get_event_effective_date(max_event_id)
        corps = bc_registries.get_unprocessed_corp_events(prev_event_id, last_event_dt, max_event_id, max_event_dt, corps)
        
        print("Update our queue")
        event_processor.update_corp_event_queue(lear_system_type, corps, max_event_id, max_event_date)
